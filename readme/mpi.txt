//mpi

sudo apt update
sudo apt install mpich
mpiexec --version

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
    int rank, size;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    printf("Hello from rank %d out of %d\n", rank, size);

    MPI_Finalize();
    return 0;
}

save as cloud.c
mpicc -o cloud cloud.c
mpiexec -n 4 ./cloud


code2:
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int global_max, local_max;

    // Initialize the MPI environment
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Ensure there are enough command line arguments
    if (argc < 2) {
        if (rank == 0) {
            printf("Usage: mpiexec -n <number_of_processes> ./mpi_largest <array_elements>\n");
        }
        MPI_Finalize();
        return 0;
    }

    // Determine the size of the array from the number of arguments
    int array_size = argc - 1;  // Subtract 1 for the program name
    int numbers[array_size];

    // Root process reads the numbers from command line arguments
    if (rank == 0) {
        for (int i = 0; i < array_size; i++) {
            numbers[i] = atoi(argv[i + 1]);  // Convert command line arguments to integers
        }
    }

    // Broadcast the array size to all processes
    MPI_Bcast(&array_size, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Broadcast the array to all processes
    MPI_Bcast(numbers, array_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process calculates the local maximum
    int local_start = (rank * array_size) / size;
    int local_end = ((rank + 1) * array_size) / size;

    local_max = numbers[local_start];
    for (int i = local_start + 1; i < local_end; i++) {
        if (numbers[i] > local_max) {
            local_max = numbers[i];
        }
    }

    // Reduce the local maximums to find the global maximum
    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

    // Root process prints the largest number
    if (rank == 0) {
        printf("The largest number in the array is: %d\n", global_max);
    }

    // Finalize the MPI environment
    MPI_Finalize();
    return 0;
}


code 3:
#include <stdio.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    MPI_Status status;
    int msg[2];
    const int tag = 42;

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    if (size < 2) {
        if (rank == 0) printf("You need at least 2 processors to run this program\n");
        MPI_Finalize();
        return 0;
    }

    if (rank == 0) { // Receiver
        for (int i = 1; i < size; i++) {
            MPI_Recv(msg, 2, MPI_INT, MPI_ANY_SOURCE, tag, MPI_COMM_WORLD, &status);
            printf("Received message %d %d from process %d\n", msg[0], msg[1], status.MPI_SOURCE);
        }
    } else { // Senders
        msg[0] = rank;
        msg[1] = size;
        MPI_Send(msg, 2, MPI_INT, 0, tag, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}


code 4:
#include <stdio.h>
#include <stdlib.h> // Include for `atoi`
#include <mpi.h>
#include <math.h>

int main(int argc, char *argv[]) {
    int n, rank, size, i;
    double PI25DT = 3.141592653589793238462643;
    double mypi, pi, h, sum, x;

    MPI_Init(&argc, &argv); // Initialize the MPI environment
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Get the number of processes
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get the rank of the process

    if (argc < 2) {
        if (rank == 0) {
            fprintf(stderr, "Usage: %s <number of intervals>\n", argv[0]);
        }
        MPI_Finalize();
        return 1;
    }

    // Convert the command-line argument to an integer
    n = atoi(argv[1]);
    if (n <= 0) {
        if (rank == 0) {
            fprintf(stderr, "Number of intervals must be a positive integer.\n");
        }
        MPI_Finalize();
        return 1;
    }

    // Compute the integral
    h = 1.0 / (double)n;
    sum = 0.0;
    for (i = rank + 1; i <= n; i += size) {
        x = h * (i - 0.5);
        sum += 4.0 / (1.0 + x * x);
    }
    mypi = h * sum;

    // Reduce results from all processes to process 0
    MPI_Reduce(&mypi, &pi, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // Print result from process 0
    if (rank == 0) {
        printf("pi is approximately %.16f, Error is %.16f\n", pi, fabs(pi - PI25DT));
    }

    MPI_Finalize(); // Finalize the MPI environment
    return 0;
}


